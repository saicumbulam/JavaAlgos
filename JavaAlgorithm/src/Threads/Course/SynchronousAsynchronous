Synchronous Execution:
Synchronous execution refers to line-by-line execution of code.
If a function is invoked, the program execution waits until the
function call is completed. Synchronous execution blocks at
each method call before proceeding to the next line of code.



ASynchronous Execution:
Asynchronous (or async) execution refers to execution that doesn't block when invoking subroutines.
Async execution can invoke a method and move onto the next line of code without waiting for the
invoked function to complete or receive its result.
Usually, such methods return an entity sometimes called a future or promise
that is a representation of an in-progress computation.
The program can query for the status of the computation via
the returned future or promise and retrieve the result once completed.
Another pattern is to pass a callback function to the asynchronous
function call which is invoked with the results when the asynchronous
function is done processing. Asynchronous programming is an excellent choice for
applications that do extensive network or disk I/O and spend most of their time waiting.
As an example, Javascript enables concurrency using AJAX library's asynchronous method calls.
